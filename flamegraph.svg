<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="83778436662"><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (893,322,582 samples, 1.07%)</title><rect x="12.8261%" y="229" width="1.0663%" height="15" fill="rgb(227,0,7)" fg:x="10745497760" fg:w="893322582"/><text x="13.0761%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (893,322,582 samples, 1.07%)</title><rect x="12.8261%" y="213" width="1.0663%" height="15" fill="rgb(217,0,24)" fg:x="10745497760" fg:w="893322582"/><text x="13.0761%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (426,546,440 samples, 0.51%)</title><rect x="13.8924%" y="229" width="0.5091%" height="15" fill="rgb(221,193,54)" fg:x="11638820342" fg:w="426546440"/><text x="14.1424%" y="239.50"></text></g><g><title>task_tick_fair (12,646,731 samples, 0.02%)</title><rect x="19.2130%" y="69" width="0.0151%" height="15" fill="rgb(248,212,6)" fg:x="16096331317" fg:w="12646731"/><text x="19.4630%" y="79.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (25,072,757 samples, 0.03%)</title><rect x="19.2082%" y="213" width="0.0299%" height="15" fill="rgb(208,68,35)" fg:x="16092340109" fg:w="25072757"/><text x="19.4582%" y="223.50"></text></g><g><title>sysvec_apic_timer_interrupt (25,072,757 samples, 0.03%)</title><rect x="19.2082%" y="197" width="0.0299%" height="15" fill="rgb(232,128,0)" fg:x="16092340109" fg:w="25072757"/><text x="19.4582%" y="207.50"></text></g><g><title>__sysvec_apic_timer_interrupt (25,072,757 samples, 0.03%)</title><rect x="19.2082%" y="181" width="0.0299%" height="15" fill="rgb(207,160,47)" fg:x="16092340109" fg:w="25072757"/><text x="19.4582%" y="191.50"></text></g><g><title>hrtimer_interrupt (25,072,757 samples, 0.03%)</title><rect x="19.2082%" y="165" width="0.0299%" height="15" fill="rgb(228,23,34)" fg:x="16092340109" fg:w="25072757"/><text x="19.4582%" y="175.50"></text></g><g><title>__hrtimer_run_queues (25,072,757 samples, 0.03%)</title><rect x="19.2082%" y="149" width="0.0299%" height="15" fill="rgb(218,30,26)" fg:x="16092340109" fg:w="25072757"/><text x="19.4582%" y="159.50"></text></g><g><title>tick_nohz_highres_handler (25,072,757 samples, 0.03%)</title><rect x="19.2082%" y="133" width="0.0299%" height="15" fill="rgb(220,122,19)" fg:x="16092340109" fg:w="25072757"/><text x="19.4582%" y="143.50"></text></g><g><title>tick_sched_handle (21,081,549 samples, 0.03%)</title><rect x="19.2130%" y="117" width="0.0252%" height="15" fill="rgb(250,228,42)" fg:x="16096331317" fg:w="21081549"/><text x="19.4630%" y="127.50"></text></g><g><title>update_process_times (21,081,549 samples, 0.03%)</title><rect x="19.2130%" y="101" width="0.0252%" height="15" fill="rgb(240,193,28)" fg:x="16096331317" fg:w="21081549"/><text x="19.4630%" y="111.50"></text></g><g><title>scheduler_tick (21,081,549 samples, 0.03%)</title><rect x="19.2130%" y="85" width="0.0252%" height="15" fill="rgb(216,20,37)" fg:x="16096331317" fg:w="21081549"/><text x="19.4630%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (7,670,837,243 samples, 9.16%)</title><rect x="10.0820%" y="245" width="9.1561%" height="15" fill="rgb(206,188,39)" fg:x="8446577411" fg:w="7670837243"/><text x="10.3320%" y="255.50">alloc::vec::V..</text></g><g><title>core::ptr::read (4,052,047,872 samples, 4.84%)</title><rect x="14.4015%" y="229" width="4.8366%" height="15" fill="rgb(217,207,13)" fg:x="12065366782" fg:w="4052047872"/><text x="14.6515%" y="239.50">core::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1,352,040,066 samples, 1.61%)</title><rect x="22.6478%" y="229" width="1.6138%" height="15" fill="rgb(231,73,38)" fg:x="18973946735" fg:w="1352040066"/><text x="22.8978%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,352,040,066 samples, 1.61%)</title><rect x="22.6478%" y="213" width="1.6138%" height="15" fill="rgb(225,20,46)" fg:x="18973946735" fg:w="1352040066"/><text x="22.8978%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (603,260,366 samples, 0.72%)</title><rect x="24.2616%" y="229" width="0.7201%" height="15" fill="rgb(210,31,41)" fg:x="20325986801" fg:w="603260366"/><text x="24.5116%" y="239.50"></text></g><g><title>perf_event_task_tick (8,481,178 samples, 0.01%)</title><rect x="28.5942%" y="69" width="0.0101%" height="15" fill="rgb(221,200,47)" fg:x="23955744308" fg:w="8481178"/><text x="28.8442%" y="79.50"></text></g><g><title>perf_adjust_freq_unthr_context (8,481,178 samples, 0.01%)</title><rect x="28.5942%" y="53" width="0.0101%" height="15" fill="rgb(226,26,5)" fg:x="23955744308" fg:w="8481178"/><text x="28.8442%" y="63.50"></text></g><g><title>perf_ibs_stop (8,481,178 samples, 0.01%)</title><rect x="28.5942%" y="37" width="0.0101%" height="15" fill="rgb(249,33,26)" fg:x="23955744308" fg:w="8481178"/><text x="28.8442%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7,855,129,905 samples, 9.38%)</title><rect x="19.2381%" y="245" width="9.3761%" height="15" fill="rgb(235,183,28)" fg:x="16117414654" fg:w="7855129905"/><text x="19.4881%" y="255.50">alloc::vec::V..</text></g><g><title>core::ptr::write (3,043,297,392 samples, 3.63%)</title><rect x="24.9817%" y="229" width="3.6326%" height="15" fill="rgb(221,5,38)" fg:x="20929247167" fg:w="3043297392"/><text x="25.2317%" y="239.50">core..</text></g><g><title>asm_sysvec_apic_timer_interrupt (16,800,251 samples, 0.02%)</title><rect x="28.5942%" y="213" width="0.0201%" height="15" fill="rgb(247,18,42)" fg:x="23955744308" fg:w="16800251"/><text x="28.8442%" y="223.50"></text></g><g><title>sysvec_apic_timer_interrupt (16,800,251 samples, 0.02%)</title><rect x="28.5942%" y="197" width="0.0201%" height="15" fill="rgb(241,131,45)" fg:x="23955744308" fg:w="16800251"/><text x="28.8442%" y="207.50"></text></g><g><title>__sysvec_apic_timer_interrupt (16,800,251 samples, 0.02%)</title><rect x="28.5942%" y="181" width="0.0201%" height="15" fill="rgb(249,31,29)" fg:x="23955744308" fg:w="16800251"/><text x="28.8442%" y="191.50"></text></g><g><title>hrtimer_interrupt (16,800,251 samples, 0.02%)</title><rect x="28.5942%" y="165" width="0.0201%" height="15" fill="rgb(225,111,53)" fg:x="23955744308" fg:w="16800251"/><text x="28.8442%" y="175.50"></text></g><g><title>__hrtimer_run_queues (16,800,251 samples, 0.02%)</title><rect x="28.5942%" y="149" width="0.0201%" height="15" fill="rgb(238,160,17)" fg:x="23955744308" fg:w="16800251"/><text x="28.8442%" y="159.50"></text></g><g><title>tick_nohz_highres_handler (16,800,251 samples, 0.02%)</title><rect x="28.5942%" y="133" width="0.0201%" height="15" fill="rgb(214,148,48)" fg:x="23955744308" fg:w="16800251"/><text x="28.8442%" y="143.50"></text></g><g><title>tick_sched_handle (16,800,251 samples, 0.02%)</title><rect x="28.5942%" y="117" width="0.0201%" height="15" fill="rgb(232,36,49)" fg:x="23955744308" fg:w="16800251"/><text x="28.8442%" y="127.50"></text></g><g><title>update_process_times (16,800,251 samples, 0.02%)</title><rect x="28.5942%" y="101" width="0.0201%" height="15" fill="rgb(209,103,24)" fg:x="23955744308" fg:w="16800251"/><text x="28.8442%" y="111.50"></text></g><g><title>scheduler_tick (16,800,251 samples, 0.02%)</title><rect x="28.5942%" y="85" width="0.0201%" height="15" fill="rgb(229,88,8)" fg:x="23955744308" fg:w="16800251"/><text x="28.8442%" y="95.50"></text></g><g><title>scheduler_tick (16,462,147 samples, 0.02%)</title><rect x="28.6142%" y="117" width="0.0196%" height="15" fill="rgb(213,181,19)" fg:x="23972544559" fg:w="16462147"/><text x="28.8642%" y="127.50"></text></g><g><title>__sysvec_apic_timer_interrupt (20,713,796 samples, 0.02%)</title><rect x="28.6142%" y="213" width="0.0247%" height="15" fill="rgb(254,191,54)" fg:x="23972544559" fg:w="20713796"/><text x="28.8642%" y="223.50"></text></g><g><title>hrtimer_interrupt (20,713,796 samples, 0.02%)</title><rect x="28.6142%" y="197" width="0.0247%" height="15" fill="rgb(241,83,37)" fg:x="23972544559" fg:w="20713796"/><text x="28.8642%" y="207.50"></text></g><g><title>__hrtimer_run_queues (20,713,796 samples, 0.02%)</title><rect x="28.6142%" y="181" width="0.0247%" height="15" fill="rgb(233,36,39)" fg:x="23972544559" fg:w="20713796"/><text x="28.8642%" y="191.50"></text></g><g><title>tick_nohz_highres_handler (20,713,796 samples, 0.02%)</title><rect x="28.6142%" y="165" width="0.0247%" height="15" fill="rgb(226,3,54)" fg:x="23972544559" fg:w="20713796"/><text x="28.8642%" y="175.50"></text></g><g><title>tick_sched_handle (20,713,796 samples, 0.02%)</title><rect x="28.6142%" y="149" width="0.0247%" height="15" fill="rgb(245,192,40)" fg:x="23972544559" fg:w="20713796"/><text x="28.8642%" y="159.50"></text></g><g><title>update_process_times (20,713,796 samples, 0.02%)</title><rect x="28.6142%" y="133" width="0.0247%" height="15" fill="rgb(238,167,29)" fg:x="23972544559" fg:w="20713796"/><text x="28.8642%" y="143.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (24,999,789 samples, 0.03%)</title><rect x="28.6142%" y="245" width="0.0298%" height="15" fill="rgb(232,182,51)" fg:x="23972544559" fg:w="24999789"/><text x="28.8642%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (24,999,789 samples, 0.03%)</title><rect x="28.6142%" y="229" width="0.0298%" height="15" fill="rgb(231,60,39)" fg:x="23972544559" fg:w="24999789"/><text x="28.8642%" y="239.50"></text></g><g><title>&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (419,706,599 samples, 0.50%)</title><rect x="29.9287%" y="213" width="0.5010%" height="15" fill="rgb(208,69,12)" fg:x="25073815103" fg:w="419706599"/><text x="30.1787%" y="223.50"></text></g><g><title>core::num::&lt;impl i32&gt;::checked_add_unsigned (419,706,599 samples, 0.50%)</title><rect x="29.9287%" y="197" width="0.5010%" height="15" fill="rgb(235,93,37)" fg:x="25073815103" fg:w="419706599"/><text x="30.1787%" y="207.50"></text></g><g><title>core::num::&lt;impl i32&gt;::overflowing_add_unsigned (419,706,599 samples, 0.50%)</title><rect x="29.9287%" y="181" width="0.5010%" height="15" fill="rgb(213,116,39)" fg:x="25073815103" fg:w="419706599"/><text x="30.1787%" y="191.50"></text></g><g><title>core::num::&lt;impl i32&gt;::overflowing_add (419,706,599 samples, 0.50%)</title><rect x="29.9287%" y="165" width="0.5010%" height="15" fill="rgb(222,207,29)" fg:x="25073815103" fg:w="419706599"/><text x="30.1787%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1,545,606,076 samples, 1.84%)</title><rect x="30.4297%" y="213" width="1.8449%" height="15" fill="rgb(206,96,30)" fg:x="25493521702" fg:w="1545606076"/><text x="30.6797%" y="223.50">c..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,211,654,588 samples, 3.83%)</title><rect x="28.6441%" y="245" width="3.8335%" height="15" fill="rgb(218,138,4)" fg:x="23997544348" fg:w="3211654588"/><text x="28.8941%" y="255.50">core..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,211,654,588 samples, 3.83%)</title><rect x="28.6441%" y="229" width="3.8335%" height="15" fill="rgb(250,191,14)" fg:x="23997544348" fg:w="3211654588"/><text x="28.8941%" y="239.50">&lt;cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (170,071,158 samples, 0.20%)</title><rect x="32.2746%" y="213" width="0.2030%" height="15" fill="rgb(239,60,40)" fg:x="27039127778" fg:w="170071158"/><text x="32.5246%" y="223.50"></text></g><g><title>__hrtimer_run_queues (19,923,809 samples, 0.02%)</title><rect x="45.8575%" y="165" width="0.0238%" height="15" fill="rgb(206,27,48)" fg:x="38418665918" fg:w="19923809"/><text x="46.1075%" y="175.50"></text></g><g><title>tick_nohz_highres_handler (19,923,809 samples, 0.02%)</title><rect x="45.8575%" y="149" width="0.0238%" height="15" fill="rgb(225,35,8)" fg:x="38418665918" fg:w="19923809"/><text x="46.1075%" y="159.50"></text></g><g><title>tick_sched_handle (15,689,994 samples, 0.02%)</title><rect x="45.8625%" y="133" width="0.0187%" height="15" fill="rgb(250,213,24)" fg:x="38422899733" fg:w="15689994"/><text x="46.1125%" y="143.50"></text></g><g><title>update_process_times (15,689,994 samples, 0.02%)</title><rect x="45.8625%" y="117" width="0.0187%" height="15" fill="rgb(247,123,22)" fg:x="38422899733" fg:w="15689994"/><text x="46.1125%" y="127.50"></text></g><g><title>scheduler_tick (15,689,994 samples, 0.02%)</title><rect x="45.8625%" y="101" width="0.0187%" height="15" fill="rgb(231,138,38)" fg:x="38422899733" fg:w="15689994"/><text x="46.1125%" y="111.50"></text></g><g><title>__sysvec_apic_timer_interrupt (24,135,835 samples, 0.03%)</title><rect x="45.8575%" y="197" width="0.0288%" height="15" fill="rgb(231,145,46)" fg:x="38418665918" fg:w="24135835"/><text x="46.1075%" y="207.50"></text></g><g><title>hrtimer_interrupt (24,135,835 samples, 0.03%)</title><rect x="45.8575%" y="181" width="0.0288%" height="15" fill="rgb(251,118,11)" fg:x="38418665918" fg:w="24135835"/><text x="46.1075%" y="191.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (24,136,182 samples, 0.03%)</title><rect x="45.8575%" y="229" width="0.0288%" height="15" fill="rgb(217,147,25)" fg:x="38418665918" fg:w="24136182"/><text x="46.1075%" y="239.50"></text></g><g><title>sysvec_apic_timer_interrupt (24,136,182 samples, 0.03%)</title><rect x="45.8575%" y="213" width="0.0288%" height="15" fill="rgb(247,81,37)" fg:x="38418665918" fg:w="24136182"/><text x="46.1075%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (11,233,604,768 samples, 13.41%)</title><rect x="32.4776%" y="245" width="13.4087%" height="15" fill="rgb(209,12,38)" fg:x="27209198936" fg:w="11233604768"/><text x="32.7276%" y="255.50">core::num::&lt;impl u64..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (218,562,776 samples, 0.26%)</title><rect x="87.1912%" y="229" width="0.2609%" height="15" fill="rgb(227,1,9)" fg:x="73047428616" fg:w="218562776"/><text x="87.4412%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (218,562,776 samples, 0.26%)</title><rect x="87.1912%" y="213" width="0.2609%" height="15" fill="rgb(248,47,43)" fg:x="73047428616" fg:w="218562776"/><text x="87.4412%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (218,562,776 samples, 0.26%)</title><rect x="87.1912%" y="197" width="0.2609%" height="15" fill="rgb(221,10,30)" fg:x="73047428616" fg:w="218562776"/><text x="87.4412%" y="207.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (11,970,285 samples, 0.01%)</title><rect x="87.4521%" y="229" width="0.0143%" height="15" fill="rgb(210,229,1)" fg:x="73265991392" fg:w="11970285"/><text x="87.7021%" y="239.50"></text></g><g><title>sysvec_apic_timer_interrupt (11,970,285 samples, 0.01%)</title><rect x="87.4521%" y="213" width="0.0143%" height="15" fill="rgb(222,148,37)" fg:x="73265991392" fg:w="11970285"/><text x="87.7021%" y="223.50"></text></g><g><title>__sysvec_apic_timer_interrupt (11,970,285 samples, 0.01%)</title><rect x="87.4521%" y="197" width="0.0143%" height="15" fill="rgb(234,67,33)" fg:x="73265991392" fg:w="11970285"/><text x="87.7021%" y="207.50"></text></g><g><title>hrtimer_interrupt (11,970,285 samples, 0.01%)</title><rect x="87.4521%" y="181" width="0.0143%" height="15" fill="rgb(247,98,35)" fg:x="73265991392" fg:w="11970285"/><text x="87.7021%" y="191.50"></text></g><g><title>__hrtimer_run_queues (11,970,285 samples, 0.01%)</title><rect x="87.4521%" y="165" width="0.0143%" height="15" fill="rgb(247,138,52)" fg:x="73265991392" fg:w="11970285"/><text x="87.7021%" y="175.50"></text></g><g><title>tick_nohz_highres_handler (11,970,285 samples, 0.01%)</title><rect x="87.4521%" y="149" width="0.0143%" height="15" fill="rgb(213,79,30)" fg:x="73265991392" fg:w="11970285"/><text x="87.7021%" y="159.50"></text></g><g><title>tick_sched_handle (11,970,285 samples, 0.01%)</title><rect x="87.4521%" y="133" width="0.0143%" height="15" fill="rgb(246,177,23)" fg:x="73265991392" fg:w="11970285"/><text x="87.7021%" y="143.50"></text></g><g><title>update_process_times (11,970,285 samples, 0.01%)</title><rect x="87.4521%" y="117" width="0.0143%" height="15" fill="rgb(230,62,27)" fg:x="73265991392" fg:w="11970285"/><text x="87.7021%" y="127.50"></text></g><g><title>scheduler_tick (11,970,285 samples, 0.01%)</title><rect x="87.4521%" y="101" width="0.0143%" height="15" fill="rgb(216,154,8)" fg:x="73265991392" fg:w="11970285"/><text x="87.7021%" y="111.50"></text></g><g><title>runnable_binary::agent::Agent::Agent::can_prune (39,175,466,092 samples, 46.76%)</title><rect x="45.8863%" y="245" width="46.7608%" height="15" fill="rgb(244,35,45)" fg:x="38442803704" fg:w="39175466092"/><text x="46.1363%" y="255.50">runnable_binary::agent::Agent::Agent::can_prune</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,340,308,119 samples, 5.18%)</title><rect x="87.4664%" y="229" width="5.1807%" height="15" fill="rgb(251,115,12)" fg:x="73277961677" fg:w="4340308119"/><text x="87.7164%" y="239.50">core::..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,340,308,119 samples, 5.18%)</title><rect x="87.4664%" y="213" width="5.1807%" height="15" fill="rgb(240,54,50)" fg:x="73277961677" fg:w="4340308119"/><text x="87.7164%" y="223.50">&lt;core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4,336,363,367 samples, 5.18%)</title><rect x="87.4711%" y="197" width="5.1760%" height="15" fill="rgb(233,84,52)" fg:x="73281906429" fg:w="4336363367"/><text x="87.7211%" y="207.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,611,856,394 samples, 1.92%)</title><rect x="92.6471%" y="213" width="1.9240%" height="15" fill="rgb(207,117,47)" fg:x="77618269796" fg:w="1611856394"/><text x="92.8971%" y="223.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,009,517,553 samples, 1.20%)</title><rect x="93.3660%" y="197" width="1.2050%" height="15" fill="rgb(249,43,39)" fg:x="78220608637" fg:w="1009517553"/><text x="93.6160%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,009,517,553 samples, 1.20%)</title><rect x="93.3660%" y="181" width="1.2050%" height="15" fill="rgb(209,38,44)" fg:x="78220608637" fg:w="1009517553"/><text x="93.6160%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,149,672,944 samples, 2.57%)</title><rect x="92.6471%" y="229" width="2.5659%" height="15" fill="rgb(236,212,23)" fg:x="77618269796" fg:w="2149672944"/><text x="92.8971%" y="239.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (537,816,550 samples, 0.64%)</title><rect x="94.5710%" y="213" width="0.6420%" height="15" fill="rgb(242,79,21)" fg:x="79230126190" fg:w="537816550"/><text x="94.8210%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (537,816,550 samples, 0.64%)</title><rect x="94.5710%" y="197" width="0.6420%" height="15" fill="rgb(211,96,35)" fg:x="79230126190" fg:w="537816550"/><text x="94.8210%" y="207.50"></text></g><g><title>runnable_binary::agent::Agent::Agent::get_visible_peaks (3,152,050,107 samples, 3.76%)</title><rect x="92.6471%" y="245" width="3.7624%" height="15" fill="rgb(253,215,40)" fg:x="77618269796" fg:w="3152050107"/><text x="92.8971%" y="255.50">runn..</text></g><g><title>runnable_binary::agent::Agent::Agent::coord_to_index (1,002,377,163 samples, 1.20%)</title><rect x="95.2130%" y="229" width="1.1965%" height="15" fill="rgb(211,81,21)" fg:x="79767942740" fg:w="1002377163"/><text x="95.4630%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16,273,165 samples, 0.02%)</title><rect x="96.4094%" y="213" width="0.0194%" height="15" fill="rgb(208,190,38)" fg:x="80770319903" fg:w="16273165"/><text x="96.6594%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16,273,165 samples, 0.02%)</title><rect x="96.4094%" y="197" width="0.0194%" height="15" fill="rgb(235,213,38)" fg:x="80770319903" fg:w="16273165"/><text x="96.6594%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (16,273,165 samples, 0.02%)</title><rect x="96.4094%" y="181" width="0.0194%" height="15" fill="rgb(237,122,38)" fg:x="80770319903" fg:w="16273165"/><text x="96.6594%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (24,740,797 samples, 0.03%)</title><rect x="96.4094%" y="229" width="0.0295%" height="15" fill="rgb(244,218,35)" fg:x="80770319903" fg:w="24740797"/><text x="96.6594%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8,467,632 samples, 0.01%)</title><rect x="96.4289%" y="213" width="0.0101%" height="15" fill="rgb(240,68,47)" fg:x="80786593068" fg:w="8467632"/><text x="96.6789%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8,467,632 samples, 0.01%)</title><rect x="96.4289%" y="197" width="0.0101%" height="15" fill="rgb(210,16,53)" fg:x="80786593068" fg:w="8467632"/><text x="96.6789%" y="207.50"></text></g><g><title>runnable_binary::agent::Agent::Agent::get_visited_altitudes (37,257,401 samples, 0.04%)</title><rect x="96.4094%" y="245" width="0.0445%" height="15" fill="rgb(235,124,12)" fg:x="80770319903" fg:w="37257401"/><text x="96.6594%" y="255.50"></text></g><g><title>runnable_binary::agent::Agent::Agent::index_to_coord (12,516,604 samples, 0.01%)</title><rect x="96.4390%" y="229" width="0.0149%" height="15" fill="rgb(224,169,11)" fg:x="80795060700" fg:w="12516604"/><text x="96.6890%" y="239.50"></text></g><g><title>runnable_binary::agent::Agent::Agent::is_occupied (2,445,318,736 samples, 2.92%)</title><rect x="96.4539%" y="245" width="2.9188%" height="15" fill="rgb(250,166,2)" fg:x="80807577304" fg:w="2445318736"/><text x="96.7039%" y="255.50">ru..</text></g><g><title>__libc_start_main_impl (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="517" width="99.9094%" height="15" fill="rgb(242,216,29)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="527.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="501" width="99.9094%" height="15" fill="rgb(230,116,27)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="511.50">__libc_start_call_main</text></g><g><title>main (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="485" width="99.9094%" height="15" fill="rgb(228,99,48)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="469" width="99.9094%" height="15" fill="rgb(253,11,6)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="453" width="99.9094%" height="15" fill="rgb(247,143,39)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="437" width="99.9094%" height="15" fill="rgb(236,97,10)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="421" width="99.9094%" height="15" fill="rgb(233,208,19)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="431.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="405" width="99.9094%" height="15" fill="rgb(216,164,2)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="415.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="389" width="99.9094%" height="15" fill="rgb(220,129,5)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="399.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="373" width="99.9094%" height="15" fill="rgb(242,17,10)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="383.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="357" width="99.9094%" height="15" fill="rgb(242,107,0)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="367.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="341" width="99.9094%" height="15" fill="rgb(251,28,31)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="351.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="325" width="99.9094%" height="15" fill="rgb(233,223,10)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="335.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="309" width="99.9094%" height="15" fill="rgb(215,21,27)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="319.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="293" width="99.9094%" height="15" fill="rgb(232,23,21)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="303.50">core::ops::function::FnOnce::call_once</text></g><g><title>runnable_binary::main (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="277" width="99.9094%" height="15" fill="rgb(244,5,23)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="287.50">runnable_binary::main</text></g><g><title>runnable_binary::agent::Agent::Agent::dfs (83,702,574,511 samples, 99.91%)</title><rect x="0.0000%" y="261" width="99.9094%" height="15" fill="rgb(226,81,46)" fg:x="2764" fg:w="83702574511"/><text x="0.2500%" y="271.50">runnable_binary::agent::Agent::Agent::dfs</text></g><g><title>runnable_binary::agent::Agent::Agent::translate_probes_to_u8 (449,681,235 samples, 0.54%)</title><rect x="99.3727%" y="245" width="0.5368%" height="15" fill="rgb(247,70,30)" fg:x="83252896040" fg:w="449681235"/><text x="99.6227%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (449,681,235 samples, 0.54%)</title><rect x="99.3727%" y="229" width="0.5368%" height="15" fill="rgb(212,68,19)" fg:x="83252896040" fg:w="449681235"/><text x="99.6227%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (449,681,235 samples, 0.54%)</title><rect x="99.3727%" y="213" width="0.5368%" height="15" fill="rgb(240,187,13)" fg:x="83252896040" fg:w="449681235"/><text x="99.6227%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (449,681,235 samples, 0.54%)</title><rect x="99.3727%" y="197" width="0.5368%" height="15" fill="rgb(223,113,26)" fg:x="83252896040" fg:w="449681235"/><text x="99.6227%" y="207.50"></text></g><g><title>_start (83,703,183,250 samples, 99.91%)</title><rect x="0.0000%" y="533" width="99.9102%" height="15" fill="rgb(206,192,2)" fg:x="2764" fg:w="83703183250"/><text x="0.2500%" y="543.50">_start</text></g><g><title>_raw_spin_lock (8,491,036 samples, 0.01%)</title><rect x="99.9497%" y="421" width="0.0101%" height="15" fill="rgb(241,108,4)" fg:x="83736261745" fg:w="8491036"/><text x="100.1997%" y="431.50"></text></g><g><title>__hrtimer_run_queues (33,560,708 samples, 0.04%)</title><rect x="99.9348%" y="469" width="0.0401%" height="15" fill="rgb(247,173,49)" fg:x="83723796014" fg:w="33560708"/><text x="100.1848%" y="479.50"></text></g><g><title>tick_nohz_highres_handler (25,371,953 samples, 0.03%)</title><rect x="99.9446%" y="453" width="0.0303%" height="15" fill="rgb(224,114,35)" fg:x="83731984769" fg:w="25371953"/><text x="100.1946%" y="463.50"></text></g><g><title>tick_sched_do_timer (21,094,977 samples, 0.03%)</title><rect x="99.9497%" y="437" width="0.0252%" height="15" fill="rgb(245,159,27)" fg:x="83736261745" fg:w="21094977"/><text x="100.1997%" y="447.50"></text></g><g><title>tick_do_update_jiffies64 (12,603,941 samples, 0.02%)</title><rect x="99.9598%" y="421" width="0.0150%" height="15" fill="rgb(245,172,44)" fg:x="83744752781" fg:w="12603941"/><text x="100.2098%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (66,948,170 samples, 0.08%)</title><rect x="99.9102%" y="533" width="0.0799%" height="15" fill="rgb(236,23,11)" fg:x="83703186014" fg:w="66948170"/><text x="100.1602%" y="543.50"></text></g><g><title>sysvec_apic_timer_interrupt (46,338,170 samples, 0.06%)</title><rect x="99.9348%" y="517" width="0.0553%" height="15" fill="rgb(205,117,38)" fg:x="83723796014" fg:w="46338170"/><text x="100.1848%" y="527.50"></text></g><g><title>__sysvec_apic_timer_interrupt (46,338,170 samples, 0.06%)</title><rect x="99.9348%" y="501" width="0.0553%" height="15" fill="rgb(237,72,25)" fg:x="83723796014" fg:w="46338170"/><text x="100.1848%" y="511.50"></text></g><g><title>hrtimer_interrupt (46,338,170 samples, 0.06%)</title><rect x="99.9348%" y="485" width="0.0553%" height="15" fill="rgb(244,70,9)" fg:x="83723796014" fg:w="46338170"/><text x="100.1848%" y="495.50"></text></g><g><title>read_tsc (8,520,488 samples, 0.01%)</title><rect x="99.9799%" y="469" width="0.0102%" height="15" fill="rgb(217,125,39)" fg:x="83761613696" fg:w="8520488"/><text x="100.2299%" y="479.50"></text></g><g><title>all (83,778,436,662 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="83778436662"/><text x="0.2500%" y="575.50"></text></g><g><title>runnable_binary (83,778,433,898 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="2764" fg:w="83778433898"/><text x="0.2500%" y="559.50">runnable_binary</text></g></svg></svg>